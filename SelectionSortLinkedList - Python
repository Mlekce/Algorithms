class Node:
    def __init__(self, value) -> None:
        self.value = value
        self.next = None

class LinkedList:
    def __init__(self) -> None:
        self.head = None
        self.tail = None
        self.length = 0

    def append(self, value):
        new_node = Node(value)
        if self.length == 0:
            self.head = new_node
            self.tail = new_node
            self.length += 1
            return True
        self.tail.next = new_node
        self.tail = new_node
        self.length += 1
        return True
    
    def print_list(self):
        if self.length == 0:
            return None
        temp = self.head
        while temp is not None:
            print(temp.value)
            temp = temp.next

    def selection_sort(self):
            pre = self.head
            while pre.next is not None:
                smallest = pre
                temp = pre.next
                while temp is not None:
                    if temp.value < smallest.value:
                        smallest = temp
                    temp = temp.next
                if smallest != pre:
                    pre.value, smallest.value = smallest.value, pre.value
                pre = pre.next
            return True


#########################################
My take on SelectionSort
#########################################

    def selection_sort(self):
        pre = self.head
        temp = pre.next
        while pre.next is not None:
            while temp is not None:
                if pre.value > temp.value:
                    pre.value, temp.value = temp.value, pre.value
                temp = temp.next
            pre = pre.next
            temp = pre.next
        return True
